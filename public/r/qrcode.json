{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "qrcode",
  "type": "registry:component",
  "title": "QR Code Generator",
  "author": "Tobias Bueschel <https://github.com/tobiasbueschel>",
  "description": "AI SDK tool that generates QR codes for text or URLs. Includes a QR code display component.",
  "dependencies": [
    "zod",
    "ai",
    "qrcode",
    "@types/qrcode",
    "radix-ui",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": ["@ai-tools/card", "@ai-tools/button"],
  "files": [
    {
      "path": "registry/ai-tools/tools/qrcode/tool.ts",
      "content": "import { tool } from \"ai\"\nimport { z } from \"zod\"\nimport QRCode from \"qrcode\"\n\nexport const qrCodeTool = tool({\n  description: \"Generate QR codes for text, URLs, or other data.\",\n  inputSchema: z.object({\n    data: z\n      .string()\n      .min(1)\n      .describe(\"The text or URL to encode in the QR code\"),\n    size: z\n      .number()\n      .min(100)\n      .max(500)\n      .default(300)\n      .describe(\"Size of the QR code in pixels\"),\n  }),\n  execute: async ({ data, size }) => {\n    const output = await QRCode.toDataURL(data, {\n      width: size,\n      margin: 4,\n    })\n\n    const result: QRCodeResult = {\n      data,\n      size,\n      output,\n    }\n\n    return result\n  },\n})\n\nexport interface QRCodeResult {\n  data: string\n  size: number\n  output: string\n}\n\nexport default qrCodeTool\n",
      "type": "registry:file",
      "target": "~/ai/tools/qrcode/tool.ts"
    },
    {
      "path": "registry/ai-tools/tools/qrcode/component.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { QRCodeResult } from \"./tool\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/ai-tools/ui/card\"\nimport { Button } from \"@/registry/ai-tools/ui/button\"\nimport { CheckIcon, DownloadIcon } from \"lucide-react\"\n\nexport function QRCodeDisplay({ data }: { data: QRCodeResult }) {\n  const [downloading, setDownloading] = React.useState(false)\n  const [downloaded, setDownloaded] = React.useState(false)\n  const [error, setError] = React.useState<string | null>(null)\n\n  const handleDownload = async () => {\n    setDownloading(true)\n    setError(null)\n    try {\n      // Convert data URL to blob\n      const response = await fetch(data.output)\n      const blob = await response.blob()\n      const url = URL.createObjectURL(blob)\n      const a = document.createElement(\"a\")\n      a.href = url\n      a.download = \"qrcode.png\"\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      URL.revokeObjectURL(url)\n      setDownloaded(true)\n      // Brief success state similar to copy buttons\n      setTimeout(() => setDownloaded(false), 1200)\n    } catch (error) {\n      console.error(\"Failed to download QR code:\", error)\n      setError(\"Failed to download. Please try again.\")\n    } finally {\n      setDownloading(false)\n    }\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle>QR Code</CardTitle>\n        <CardDescription>\n          {data.data.length > 50 ? `${data.data.slice(0, 50)}...` : data.data}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center gap-4\">\n        <div\n          className=\"w-full rounded-lg bg-white p-4\"\n          style={{ maxWidth: `${data.size}px` }}\n        >\n          <img\n            src={data.output}\n            alt={`QR code encoding ${\n              data.data.length > 50\n                ? `'${data.data.slice(0, 50)}...'`\n                : `'${data.data}'`\n            }`}\n            width={data.size}\n            height={data.size}\n            loading=\"lazy\"\n            decoding=\"async\"\n            className=\"h-auto w-full\"\n          />\n        </div>\n        <div className=\"text-sm text-muted-foreground\">Size: {data.size}px</div>\n        <Button\n          onClick={handleDownload}\n          disabled={downloading}\n          className=\"w-full\"\n          aria-busy={downloading}\n          aria-live=\"polite\"\n          aria-label={\n            downloaded\n              ? \"QR code saved\"\n              : downloading\n                ? \"Downloading QR code\"\n                : \"Download QR code as PNG\"\n          }\n        >\n          {downloaded ? (\n            <>\n              <CheckIcon className=\"mr-1.5\" />\n              Saved\n            </>\n          ) : (\n            <>\n              <DownloadIcon className=\"mr-1.5\" />\n              {downloading ? \"Downloading...\" : \"Download PNG\"}\n            </>\n          )}\n        </Button>\n        {error ? (\n          <div\n            role=\"status\"\n            aria-live=\"assertive\"\n            className=\"w-full text-sm text-red-600\"\n          >\n            {error}\n          </div>\n        ) : null}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default QRCodeDisplay\n",
      "type": "registry:file",
      "target": "~/ai/tools/qrcode/component.tsx"
    },
    {
      "path": "registry/ai-tools/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\n        \"leading-none tracking-tight text-lg font-semibold\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/ai-tools/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot as SlotPrimitive } from \"radix-ui\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input text-foreground dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
